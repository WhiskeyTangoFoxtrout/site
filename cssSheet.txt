*hoover:
  -when the mouse over it
*focus:
-psudo-class that could change bgk color#intent for input and when the tab key used

*overflow:
    -hidden,scroll,auto,visible

*font-family:
    -"Times New Roman", Times, serif;
    -Arial, Helvetica, sans-serif
    -"Lucida Console", "Courier New", monospace
 #*   -Arial (sans-serif)
Verdana (sans-serif)
Tahoma (sans-serif)
Trebuchet MS (sans-serif)
Times New Roman (serif)
Georgia (serif)
Garamond (serif)
Courier New (monospace)
Brush Script MT (cursive)
*#

animation-name:example;
animation-iteration-count:;
animation-duration:;
*animation-direction:;:
    normal - The animation is played as normal (forwards). This is default
    reverse - The animation is played in reverse direction (backwards)
    alternate - The animation is played forwards first, then backwards
    alternate-reverse - The animation is played backwards first, then forwards

*animation-fill-mode:
    none - Default value. Animation will not apply any styles to the element before or after it is executing
    forwards - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count)
    backwards - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period
    both - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions

@keyframes example {#animation code 
  from {background-color: red;}
  to {background-color: yellow;}
}

*border-style:
  -dotted - Defines a dotted border
  -dashed - Defines a dashed border
  -solid - Defines a solid border
  -double - Defines a double border
  -groove - Defines a 3D grooved border. The effect depends on the border-color value
  -ridge - Defines a 3D ridged border. The effect depends on the border-color value
  -inset - Defines a 3D inset border. The effect depends on the border-color value
  -outset - Defines a 3D outset border. The effect depends on the border-color value
  -none - Defines no border
  -hidden - Defines a hidden border

inline:
    Displays an element as an inline element (like <span>). Any height and width properties will have no effect. This is default.	
block:
    Displays an element as a block element (like <p>). It starts on a new line, and takes up the whole width	
contents:
    Makes the container disappear, making the child elements children of the element the next level up in the DOM	
flex:
    Displays an element as a block-level flex container	
grid:
    Displays an element as a block-level grid container	
inline-block:
    Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you can apply height and width values	
inline-flex:
    Displays an element as an inline-level flex container	
inline-grid:
    Displays an element as an inline-level grid container	
inline-table:
    The element is displayed as an inline-level table	
list-item:
    Let the element behave like a <li> element	
run-in:
    Displays an element as either block or inline, depending on context	
table:
    Let the element behave like a <table> element	
table-caption:
    Let the element behave like a <caption> element	
table-column-group:
    Let the element behave like a <colgroup> element	
table-header-group:
    Let the element behave like a <thead> element	
table-footer-group:
    Let the element behave like a <tfoot> element	
table-row-group:
    Let the element behave like a <tbody> element	
table-cell:
    Let the element behave like a <td> element	
table-column:
    Let the element behave like a <col> element	
table-row:
    Let the element behave like a <tr> element	
none:
    The element is completely removed	
initial:
    Sets this property to its default value. Read about initial	
inherit:
    Inherits this property from its parent element. Read about inherit	

